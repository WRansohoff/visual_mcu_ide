UTIL_S_WS2812B_WRITE_DEC_START:
.global ws2812b_write_0
.global ws2812b_write_1
.global ws2812b_write_color
UTIL_S_WS2812B_WRITE_DEC_DONE:

UTIL_S_WS2812B_WRITE_DEF_START:
/*
 * Write a '0' to a WS2812B control pin. This means:
 * 'high' for 0.40 us, 'low' for 0.85us.
 * TODO: Support PLL clock values other than 48MHz.
 * Expects:
 *  r0 contains the GPIO ODR address.
 *  r1 contains the GPIO pin mask.
 */
.type ws2812b_write_0,%function
.section .text.ws2812b_write_0,"ax",%progbits
ws2812b_write_0:
  PUSH { r0, r1, r2, r6, r7, lr }
  MOVS r6, r0
  MOVS r7, r1
  // Pull the pin high.
  LDR  r2, [r6]
  ORRS r2, r2, r7
  STR  r2, [r6]
  // Delay 0.40 us.
  // (19,200 cycles = 0x4B00.)
  LDR  r0, =0x00004B00
  BL   delay_cycles
  // Pull the pin low.
  LDR  r2, [r6]
  MVNS r7, r7
  ANDS r2, r2, r7
  STR  r2, [r6]
  // Delay 0.85 us.
  LDR  r0, =0x00009F60
  BL   delay_cycles
  POP  { r0, r1, r2, r6, r7, pc }
.size ws2812b_write_0, .-ws2812b_write_0

/*
 * Write a '1' to a WS2812B control pin. This means:
 * 'high' for 0.80 us, 'low' for 0.45us.
 * Expects:
 *  r0 contains the GPIO ODR address.
 *  r1 contains the GPIO pin mask.
 */
.type ws2812b_write_1,%function
.section .text.ws2812b_write_1,"ax",%progbits
ws2812b_write_1:
  PUSH { r0, r1, r2, r6, r7, lr }
  MOVS r6, r0
  MOVS r7, r1
  // Pull the pin high.
  LDR  r2, [r6]
  ORRS r2, r2, r7
  STR  r2, [r6]
  // Delay 0.45 us.
  LDR  r0, =0x00005460
  BL   delay_cycles
  // Pull the pin low.
  LDR  r2, [r6]
  MVNS r7, r7
  ANDS r2, r2, r7
  STR  r2, [r6]
  // Delay 0.80 us.
  LDR  r0, =0x00009600
  BL   delay_cycles
  POP  { r0, r1, r2, r6, r7, pc }
.size ws2812b_write_1, .-ws2812b_write_1

/*
 * Write a 24-bit color to a WS2812 pin.
 * Expects:
 *  r0 contains the GPIO ODR address.
 *  r1 contains the GPIO pin mask.
 *  r2 contains the color to write, from 0x00000000
 *     up to 0x00GGRRBB
 */
.type ws2812b_write_color,%function
.section .text.ws2812b_write_color,"ax",%progbits
ws2812b_write_color:
  PUSH { r0, r1, r2, r3, r4, r5, lr }
  LDR  r3, =0x00800000
  send_ws2812b_color_bit:
    // Check the current bit.
    MOVS r4, r2
    ANDS r4, r4, r3
    BEQ  ws2812b_write_color_bit_0
    // (Write a '1')
    BL   ws2812b_write_1
    B    ws2812b_bit_done
    ws2812b_write_color_bit_0:
    BL   ws2812b_write_0
    B    ws2812b_bit_done
    ws2812b_bit_done:
      LSRS r3, r3, #1
      BEQ ws2812b_write_color_done
      B   send_ws2812b_color_bit
  ws2812b_write_color_done:
  POP  { r0, r1, r2, r3, r4, r5, pc }
.size ws2812b_write_color, .-ws2812b_write_color

UTIL_S_WS2812B_WRITE_DEF_DONE:
