UTIL_S_I2C_COMMS_DEC_START:
.global i2c_periph_init
.global i2c_send_start
.global i2c_send_stop
.global i2c_set_saddr
.global i2c_num_bytes_to_send
UTIL_S_I2C_COMMS_DEC_DONE:
UTIL_S_I2C_DC_COMMS_DEC_START:
.global i2c_send_command
.global i2c_send_data
UTIL_S_I2C_DC_COMMS_DEC_DONE:
UTIL_S_SSD1306_DRAW_FB_DEC_START:
.global i2c_display_framebuffer
UTIL_S_SSD1306_DRAW_FB_DEC_DONE:

UTIL_S_I2C_COMMS_DEF_START:
/*
 * Send a 'start transmission' sequence over I2C
 * Expects:
 *   r0 contains the I2Cx_CR2 register location.
 */
.section .text.i2c_send_start,"ax",%progbits
i2c_send_start:
    PUSH { r1, r2, lr }
    // 'Send start transmission' is bit 13 of I2Cx_CR2
    LDR  r2, =0x00002000
    LDR  r1, [r0]
    ORRS r1, r1, r2
    STR  r1, [r0]
    // Wait for the start condition to manifest.
    i2c_wait_for_start:
        LDR  r1, [r0]
        ANDS r1, r1, r2
        CMP  r1, r2
        BEQ  i2c_wait_for_start
    POP  { r1, r2, pc }
.size i2c_send_start, .-i2c_send_start

/*
 * Send an 'end/stop transmission' sequence over I2C
 * Expects:
 *   r0 contains the I2Cx_CR2 register location.
 */
.section .text.i2c_send_stop,"ax",%progbits
i2c_send_stop:
    PUSH { r1, r2, lr }
    // 'Send stop transmission' is bit 14 of I2Cx_CR2
    LDR  r2, =0x00004000
    LDR  r1, [r0]
    ORRS r1, r1, r2
    STR  r1, [r0]
    // Wait for the stop condition to manifest.
    i2c_wait_for_stop:
        LDR  r1, [r0]
        ANDS r1, r1, r2
        CMP  r1, r2
        BEQ  i2c_wait_for_stop
    // With a stop condition detected, clear the STOPF flag by
    // writing to STOPCF flag in I2C_ICR (Offset 0x1C)
    ADDS r0, r0, #24
    LDR  r2, =0x0000020
    LDR  r1, [r0]
    ORRS r1, r1, r2
    STR  r1, [r0]
    // Wait for flag to clear in I2C_ISR (Offset 0x18)
    SUBS r0, r0, #4
    i2c_wait_for_stop_clear:
        LDR  r1, [r0]
        ANDS r1, r1, r2
        CMP  r1, r2
        BEQ i2c_wait_for_stop_clear
    // Return r0 to CR1/Base address.
    SUBS r0, r0, #20
    POP  { r1, r2, pc }
.size i2c_send_stop, .-i2c_send_stop

/*
 * Set slave device address. I mean, that's what the manual
 * and even abbreviations call it. And 'replicant' is really only
 * an appropriate replacement in database terminology.
 * Expects:
 *   r0 contains I2Cx_CR2 register address.
 *   r2 contains SADDR[7:0] 7-bit address: 0b0xxx-xxxx
 */
.section .text.i2c_set_saddr,"ax",%progbits
i2c_set_saddr:
    PUSH { r1, r3, lr }
    //LSLS r2, r2, #1
    LDR  r1, [r0]
    LDR  r3, =0xFFFFFF00
    ANDS r1, r1, r3
    ORRS r1, r1, r2
    STR  r1, [r0]
    POP  { r1, r3, pc }
.size i2c_set_saddr, .-i2c_set_saddr

/*
 * Set how many bytes a transmission will contain.
 * Expects:
 *   r0 contains I2Cx_CR2 register address.
 *   r2 contains total # of bytes to send.
 */
.section .text.i2c_num_bytes_to_send,"ax",%progbits
i2c_num_bytes_to_send:
    PUSH { r1, r2, r3, lr }
    // Perform a slightly more complex load/modify/store,
    // to clear then set the 8 NYBYTES bits.
    // Reset NBYTES to 0, then set to the desired value.
    LDR  r3, [r0]
    LDR  r1, =0xFF00FFFF
    ANDS r3, r3, r1
    // Shift to NBYTES location; [23:16] from [7:0], << 16.
    LSLS r2, #16
    ORRS r3, r3, r2
    STR  r3, [r0]
    POP  { r1, r2, r3, pc }
.size i2c_num_bytes_to_send, .-i2c_num_bytes_to_send

/*
 * Send a byte of data over I2C.
 * Expects:
 *   - I2Cx peripheral is in an active transmission ('START' sent)
 *   r0 contains I2Cx[_CR1] base register address.
 *   r2 contains the byte to write; 0x000000BB.
 *   r3 contains the 'success' flag:
 *       TXIS    (standard): 0x00000002
 *       TC     (last byte): 0x00000040
 *       TCR (reload ready): 0x00000080
 */
.section .text.i2c_send_byte,"ax",%progbits
i2c_send_byte:
    PUSH { r1, r2, r4, lr }
    // Target the TXDR buffer (0x28 = 40)
    ADDS r0, #40
    // Write/modify/store to the TX buffer.
    // (Clear the TX bits first :/)
    LDR  r1, =0xFFFFFF00
    LDR  r4, [r0]
    ANDS r4, r4, r1
    // Ensure that we only write bits [7:0]
    LDR  r1, =0x000000FF
    ANDS r2, r2, r1
    ORRS r4, r4, r2
    // Store the value to transmit.
    STR  r4, [r0]

    // Wait for the TXIS bit to be set in I2Cx_ICR.
    // (Offset 0x18 = 24, 40-24=16)
    SUBS r0, #16
    MOVS r2, r3
    // (Load the status register for debug)
    LDR  r4, =0x40005404
    LDR  r4, [r4]
    i2c_send_byte_tx_wait:
        LDR  r1, [r0]
        ANDS r1, r1, r2
        BEQ  i2c_send_byte_tx_wait

    // Reset the address register that was passed in.
    SUBS r0, #24
    // Return.
    POP { r1, r2, r4, pc }
.size i2c_send_byte, .-i2c_send_byte

UTIL_S_I2C_COMMS_DEF_DONE:
UTIL_S_I2C_DC_COMMS_DEF_START:
/*
 * Send a command over I2C.
 * Expects:
 *   r0 contains I2Cx[_CR1] base address.
 *   r3 contains command byte. (0x000000BB)
 */
.section .text.i2c_send_command,"ax",%progbits
i2c_send_command:
    PUSH { r1, r2, r3, r4, lr }
    MOVS r4, r3
    // 'D/C' here is indicated by the first byte.
    // 0x00 means 'command / active'
    // i2c1_cr2_base:         0x40005404
    // Set r0 to I2Cx_CR2
    ADDS r0, r0, #4
    // Set the screen's SADD[7:0] bits.
    // My breakout defaults to 0x78, 0x7A configurable by jumper.
    LDR  r2, =0x78
    BL   i2c_set_saddr
    // Send 2 bytes; 'D/C', then the actual content.
    MOVS r2, #2
    BL   i2c_num_bytes_to_send
    BL   i2c_send_start
    // Reset r0 to I2Cx_base
    SUBS r0, r0, #4
    LDR  r2, =0x00000000
    LDR  r3, =0x00000002
    BL   i2c_send_byte
    MOVS r2, r4
    LDR  r3, =0x00000040
    BL   i2c_send_byte
    // Set r0 to I2Cx_CR2
    ADDS r0, r0, #4
    BL   i2c_send_stop
    // Reset r0 to I2Cx_base
    SUBS r0, r0, #4

    POP  { r1, r2, r3, r4, pc }
.size i2c_send_command, .-i2c_send_command

/*
 * Send a byte of data over I2C.
 * Expects:
 *   r0 contains I2Cx[_CR1] base address.
 *   r3 contains data byte. (0x000000BB)
 */
.section .text.i2c_send_data,"ax",%progbits
i2c_send_data:
    PUSH { r1, r2, r3, r4, lr }
    MOVS r4, r3
    // 'D/C' here is indicated by the first byte.
    // 0x40 means 'data / active'
    // Set r0 to I2Cx_CR2
    ADDS r0, r0, #4
    // Set the screen's SADD[7:0] bits.
    // My breakout defaults to 0x78, 0x7A configurable by jumper.
    LDR  r2, =0x78
    BL   i2c_set_saddr
    // Send 2 bytes; 'D/C', then the actual content.
    MOVS r2, #2
    BL   i2c_num_bytes_to_send
    BL   i2c_send_start
    // Reset r0 to I2Cx_base
    SUBS r0, r0, #4
    LDR  r2, =0x00000040
    LDR  r3, =0x00000002
    BL   i2c_send_byte
    MOVS r2, r4
    LDR  r4, =0x000000FF
    ANDS r2, r2, r4
    LDR  r3, =0x00000040
    BL   i2c_send_byte
    // Set r0 to I2Cx_CR2
    ADDS r0, r0, #4
    BL   i2c_send_stop
    // Reset r0 to I2Cx_base
    SUBS r0, r0, #4
    POP { r1, r2, r3, r4, pc }
.size i2c_send_data, .-i2c_send_data

UTIL_S_I2C_DC_COMMS_DEF_DONE:
UTIL_S_SSD1306_DRAW_FB_DEF_START:
/*
 * Copy the current framebuffer into the OLED.
 * Note: Framebuffer RAM is [heap_start:+1024]
 * Expects:
 *   r0: I2Cx_CR1 base address.
 *   r1: Start of framebuffer address.
 */
.type i2c_display_framebuffer,%function
.section .text.i2c_display_framebuffer,"ax",%progbits
i2c_display_framebuffer:
    PUSH { r0, r1, r2, r3, r4, r5, r6, lr }
    // Start of framebuffer memory
    MOVS r5, r1
    /*
     * In a single I2C transmission, write one 128B page
     * simply like, '0x40 / 0xdat / 0xdat / 0xdat / ...'
     * No need for interleaved 'DAT/CMD' bytes.
     * This chip can only send up to 255 bytes at once,
     * so first enable the 'RELOAD' flag in CR2.
     */
    /*
    LDR  r3, =0x00000010
    BL   i2c_send_command
    LDR  r3, =0x00000001
    BL   i2c_send_command
    LDR  r3, =0x00000040
    BL   i2c_send_command
    */
    LDR  r3, =0x00000021
    BL   i2c_send_command
    MOVS r3, #0
    BL   i2c_send_command
    MOVS r3, #127
    BL   i2c_send_command
    LDR  r3, =0x00000022
    BL   i2c_send_command
    MOVS r3, #0
    BL   i2c_send_command
    MOVS r3, #7
    BL   i2c_send_command
    //LDR  r3, =0x00000040
    //BL   i2c_send_command
    // Enable the RELOAD flag.
    ADDS r0, r0, #4
    LDR  r2, =0x01000000
    LDR  r4, [r0]
    ORRS r4, r4, r2
    STR  r4, [r0]
    // Set address (0x78 or 0x7A)
    LDR  r2, =0x78
    LDR  r4, [r0]
    ORRS r4, r4, r2
    STR  r4, [r0]
    // Reset r0 to I2Cx_base
    SUBS r0, r0, #4
    MOVS r6, #8
    SUBS r5, r5, #4
    send_framebuffer_oled_row:
        ADDS r0, r0, #4
        CMP  r6, #8
        BEQ  send_framebuffer_skip_stop
        //LDR  r4, =0x00000001
        //ANDS r4, r4, r6
        //BNE  i2c_continue_send
        BL   i2c_send_stop
        send_framebuffer_skip_stop:
        MOVS r4, #129
        MOVS r2, r4
        BL   i2c_num_bytes_to_send
        BL   i2c_send_start
        // Reset r0 to I2Cx_base
        SUBS r0, r0, #4
        LDR  r2, =0x00000040
        LDR  r3, =0x00000002
        BL   i2c_send_byte
        SUBS r4, r4, #1
        B    i2c_fb_sendforreal
        /*
        i2c_continue_send:
        MOVS r4, #128
        MOVS r2, r4
        BL   i2c_num_bytes_to_send
        // Reset r0 to I2Cx_base
        SUBS r0, r0, #4
        */
        i2c_fb_sendforreal:
        // Send bytes according to framebuffer progress. (r5)
        send_oled_row_bits:
            ADDS r5, r5, #4
            LDR  r2, [r5]
            LDR  r3, =0x00000002
            BL   i2c_send_byte
            LDR  r2, [r5]
            LSRS r2, r2, #8
            LDR  r3, =0x00000002
            BL   i2c_send_byte
            LDR  r2, [r5]
            LSRS r2, r2, #8
            LSRS r2, r2, #8
            LDR  r3, =0x00000002
            BL   i2c_send_byte
            LDR  r2, [r5]
            LSRS r2, r2, #8
            LSRS r2, r2, #8
            LSRS r2, r2, #8
            CMP  r4, #4
            BNE  send_framebuffer_normal_byte4
            LDR  r3, =0x00000080
            BL   i2c_send_byte
            B    send_framebuffer_bytes_done
            send_framebuffer_normal_byte4:
            LDR  r3, =0x00000002
            BL   i2c_send_byte
            send_framebuffer_bytes_done:
            SUBS r4, r4, #4
            BNE  send_oled_row_bits
        SUBS r6, r6, #1
        BNE  send_framebuffer_oled_row
    // Disable the RELOAD flag.
    ADDS r0, r0, #4
    LDR  r2, =0xFEFFFFFF
    LDR  r1, [r0]
    ANDS r1, r1, r2
    STR  r1, [r0]
    BL   i2c_send_stop
    POP  { r0, r1, r2, r3, r4, r5, r6, pc }
.size i2c_display_framebuffer, .-i2c_display_framebuffer

UTIL_S_SSD1306_DRAW_FB_DEF_DONE:
